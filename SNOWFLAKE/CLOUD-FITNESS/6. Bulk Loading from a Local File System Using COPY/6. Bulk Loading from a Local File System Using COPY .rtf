{\rtf1\ansi\ansicpg1252\cocoartf2761
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica-Bold;\f1\fswiss\fcharset0 ArialMT;\f2\fswiss\fcharset0 Arial-BoldMT;
}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red253\green128\blue8;\red0\green0\blue0;
\red255\green255\blue10;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;\cssrgb\c100000\c57637\c0;\csgray\c0\c0;
\cssrgb\c99942\c98555\c0;}
\paperw11900\paperh16840\margl1440\margr1440\vieww37900\viewh19680\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\b\fs70 \cf2 \cb3 \expnd0\expndtw0\kerning0
6. Bulk Loading from a Local File System Using COPY
\f1\b0 \cb4 \
\pard\pardeftab720\partightenfactor0

\fs50 \cf2 \
\
\
\pard\pardeftab720\partightenfactor0

\f2\b \cf2 \cb5 -- STEP -1
\f1\b0 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb4 -- Create a database named 'DEMODB'\
CREATE DATABASE DEMODB;\
\
\pard\pardeftab720\partightenfactor0

\f2\b \cf2 \cb5 -- STEP -2
\f1\b0 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb4 -- Create or replace a Snowflake warehouse named 'PKSWH' with specific configurations:\
CREATE OR REPLACE WAREHOUSE PKSWH\
WITH\
   WAREHOUSE_SIZE = 'X-SMALL',        -- Set warehouse size to X-SMALL\
   AUTO_SUSPEND = 120,                 -- Set auto-suspend time to 120 minutes\
   AUTO_RESUME = TRUE,                 -- Enable auto-resume\
   INITIALLY_SUSPENDED = TRUE;         -- Create the warehouse in initially suspended state\
\
\pard\pardeftab720\partightenfactor0

\f2\b \cf2 \cb5 -- STEP -3
\f1\b0 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb4 -- Create a table named 'mycsvtable' in Snowflake with specified columns:\
CREATE TABLE mycsvtable (\
    ID INTEGER,\
    lastname STRING,\
    firstname STRING,\
    company STRING,\
    email STRING,\
    workphone STRING,\
    cellphone STRING,\
    streetaddress STRING,\
    city STRING,\
    postalcode STRING\
);\
\
\pard\pardeftab720\partightenfactor0

\f2\b \cf2 \cb5 -- STEP -4
\f1\b0 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb4 -- Create or replace a Snowflake table named 'myjsontable' with a single column 'json_data_variant':\
CREATE OR REPLACE TABLE myjsontable (\
    json_data VARIANT\
);\
\
\pard\pardeftab720\partightenfactor0

\f2\b \cf2 \cb5 -- STEP -5
\f1\b0 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb4 -- Create or replace a Snowflake file format named 'mycsvformat' with type 'CSV':\
CREATE OR REPLACE FILE FORMAT mycsvformat\
TYPE = 'CSV'\
FIELD_DELIMITER = '|'\
SKIP_HEADER = 1;\
\
-- Create or replace a Snowflake file format named 'myjsonformat' with type 'JSON':\
CREATE OR REPLACE FILE FORMAT myjsonformat\
TYPE = 'JSON'\
STRIP_OUTER_ARRAY = TRUE;\
\
\
\pard\pardeftab720\partightenfactor0

\f2\b \cf2 \cb5 -- STEP -6
\f1\b0 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb4 -- Create or replace a Snowflake stage named 'my_csv_stage' with file format 'mycsvformat':\
CREATE OR REPLACE STAGE my_csv_stage\
FILE_FORMAT = 'mycsvformat';\
\
-- Create or replace a Snowflake stage named 'my_json_stage' with file format 'myjsonformat':\
CREATE OR REPLACE STAGE my_json_stage\
FILE_FORMAT = 'myjsonformat';\
\
\pard\pardeftab720\partightenfactor0

\f2\b \cf2 \cb5 -- STEP -7\
\pard\pardeftab720\partightenfactor0

\f1\b0 \cf2 \cb4 \
-- PUT command to upload CSV files from a different local directory to the Snowflake CSV stage with compression\
PUT file:///Users/praveensingh/Downloads/load/contacts*.csv @MY_CSV_STAGE AUTO_COMPRESS=TRUE;\
\
\
-- PUT command to upload a JSON file from a different local directory to the Snowflake JSON stage with compression\
PUT file:///Users/praveensingh/Downloads/load/sales.json @MY_JSON_STAGE AUTO_COMPRESS=TRUE;\
\
\
\pard\pardeftab720\partightenfactor0

\f2\b \cf2 \cb5 -- STEP -8
\f1\b0 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb4 \
-- List files in the MY_CSV_STAGE stage\
LIST @MY_CSV_STAGE;\
\
-- List files in the MY_JSON_STAGE stage\
LIST @MY_JSON_STAGE;\
\
\
\pard\pardeftab720\partightenfactor0

\f2\b \cf2 \cb5 -- STEP -9
\f1\b0 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb4 \
-- Copy CSV data from the staged files to the MYCSVTABLE\
COPY INTO MYCSVTABLE\
FROM @MY_CSV_STAGE/contacts1.csv.gz\
FILE_FORMAT = (FORMAT_NAME = 'MYCSVFORMAT')\
ON_ERROR = 'SKIP_FILE';\
\
-- Copy CSV data from the staged files to the MYCSVTABLE\
COPY INTO MYCSVTABLE\
FROM @MY_CSV_STAGE\
FILE_FORMAT = (FORMAT_NAME = 'MYCSVFORMAT')\
PATTERN = '.*contacts[2-5].csv.gz'\
ON_ERROR = 'SKIP_FILE';\
\
\
-- Copy JSON data from the staged files to the MYJSONTABLE\
COPY INTO MYJSONTABLE\
FROM @MY_JSON_STAGE/sales.json.gz\
FILE_FORMAT = (FORMAT_NAME = 'MYJSONFORMAT')\
ON_ERROR = 'SKIP_FILE';\
\pard\pardeftab720\partightenfactor0
\cf2 \
\pard\pardeftab720\partightenfactor0
\cf2 \'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\
\
\pard\pardeftab720\partightenfactor0

\f2\b \cf2 \cb5 -- OPTIONAL 
\f1\b0 \cb4 \
\
-- Create a temporary table to store the CSV data with potential column count mismatch\
CREATE TEMPORARY TABLE MYCSVTABLE_TEMP AS\
SELECT *\
FROM @MY_CSV_STAGE\
(FILE_FORMAT = (FORMAT_NAME = 'MYCSVFORMAT'))\
PATTERN = '.*contacts[2-5].csv.gz'\
ON_ERROR = 'CONTINUE';\
\

\f2\b \cb5 -- OPTIONAL 
\f1\b0 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb4 -- Copy only the rows with the correct column count to the target table\
COPY INTO MYCSVTABLE\
FROM MYCSVTABLE_TEMP\
(FILE_FORMAT = (FORMAT_NAME = 'MYCSVFORMAT'))\
ON_ERROR = 'SKIP_FILE';\
\
-- Drop the temporary table\
DROP TABLE IF EXISTS MYCSVTABLE_TEMP;\
\
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\
\
\pard\pardeftab720\partightenfactor0

\f2\b \cf2 \cb5 -- STEP -10
\f1\b0 \cb4 \
\
\
-- Check the contents of MYCSVTABLE\
SELECT * FROM MYCSVTABLE;\
\
-- Check the contents of MYJSONTABLE\
SELECT * FROM MYJSONTABLE;\
\
\pard\pardeftab720\partightenfactor0

\f2\b\fs70 \cf2 \cb3 DONE\
\pard\pardeftab720\partightenfactor0

\f1\b0\fs50 \cf2 \cb4 \
\
\
\
\
\
\
}